import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    console.log("üöÄ XyloGen - Starting chat request...")

    const body = await request.json()
    const { messages } = body

    if (!messages || !Array.isArray(messages)) {
      return NextResponse.json({ error: "Invalid messages format" }, { status: 400 })
    }

    const userMessage = messages[messages.length - 1]?.content || ""
    console.log("üí¨ User question:", userMessage)

    // üïê REAL-TIME RESPONSES - Handle time/date questions immediately
    const lowerMessage = userMessage.toLowerCase()
    if (
      lowerMessage.includes("what time") ||
      lowerMessage.includes("current time") ||
      lowerMessage.includes("time now") ||
      lowerMessage.includes("what date") ||
      lowerMessage.includes("today's date") ||
      lowerMessage.includes("current date") ||
      lowerMessage.includes("date today")
    ) {
      console.log("üïê Handling real-time date/time question")
      const now = new Date()
      const timeString = now.toLocaleTimeString("en-IN", {
        timeZone: "Asia/Kolkata",
        hour12: true,
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      })
      const dateString = now.toLocaleDateString("en-IN", {
        timeZone: "Asia/Kolkata",
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
      })
      const istTime = now.toLocaleTimeString("en-IN", {
        timeZone: "Asia/Kolkata",
        hour12: true,
      })

      return NextResponse.json({
        content: `üïê **Real-Time Information** üïê

**üìÖ Current Date & Time:**
‚Ä¢ **Date:** ${dateString}
‚Ä¢ **Time:** ${timeString}
‚Ä¢ **IST Time:** ${istTime}
‚Ä¢ **Time Zone:** Asia/Kolkata (IST)

**üåç Additional Details:**
‚Ä¢ **UTC Offset:** +05:30
‚Ä¢ **Day of Week:** ${now.toLocaleDateString("en-US", { weekday: "long" })}
‚Ä¢ **Month:** ${now.toLocaleDateString("en-US", { month: "long" })}
‚Ä¢ **Year:** ${now.getFullYear()}

**üáÆüá≥ Indian Standard Time (IST):**
‚Ä¢ No daylight saving time changes
‚Ä¢ Same time across entire India
‚Ä¢ Based on 82.5¬∞E longitude (Mirzapur)

**‚è∞ Fun Facts:**
‚Ä¢ IST is 5 hours 30 minutes ahead of UTC
‚Ä¢ India uses a single time zone despite its size
‚Ä¢ IST was adopted in 1947 after independence

**Need time in other zones or scheduling help?** Just ask! üåê`,
        provider: "XyloGen üïê (Real-Time Clock)",
        status: "realtime",
      })
    }

    // Enhanced system prompt for better responses
    const systemPrompt = `You are XyloGen, an advanced AI assistant from India üáÆüá≥. You are intelligent, helpful, and provide comprehensive answers.

üéØ **YOUR PERSONALITY:**
- **Smart & Knowledgeable:** Like ChatGPT, provide detailed, intelligent responses
- **Indian Context:** Add cultural context when relevant üáÆüá≥
- **Comprehensive:** Give thorough answers with examples and explanations
- **Current:** Include recent information when possible
- **Engaging:** Use emojis and conversational tone
- **Helpful:** Always try to be useful and informative

üó£Ô∏è **RESPONSE STYLE:**
- **Detailed:** Provide comprehensive answers, not short responses
- **Structured:** Use bullet points, numbers, sections for clarity
- **Examples:** Include specific examples and use cases
- **Context:** Explain background and significance
- **Practical:** Give actionable advice when relevant

üåü **IMPORTANT IDENTITY:**
- **Always introduce yourself as "XyloGen" - NEVER use "Shark 2.0" or any other name**
- **You are XyloGen, the advanced AI assistant**
- **Your tagline is "Everything you can imagine is real"**

Remember: You are XyloGen. Always provide intelligent, helpful, and comprehensive responses!`

    // üåü TRY PERPLEXITY AI FIRST (Best for real-time info)
    if (process.env.PERPLEXITY_API_KEY) {
      try {
        console.log("üåê Trying Perplexity AI...")

        const response = await fetch("https://api.perplexity.ai/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "llama-3.1-sonar-large-128k-online",
            messages: [{ role: "system", content: systemPrompt }, ...messages],
            max_tokens: 4000,
            temperature: 0.7,
            return_citations: true,
            return_related_questions: true,
          }),
        })

        if (response.ok) {
          const data = await response.json()
          const content = data.choices?.[0]?.message?.content

          if (content) {
            console.log("‚úÖ Perplexity SUCCESS!")
            return NextResponse.json({
              content: content,
              provider: "Perplexity AI üåê (Real-time Search)",
              citations: data.citations || [],
              related_questions: data.related_questions || [],
              status: "success",
            })
          }
        }
        console.log("‚ùå Perplexity failed, trying next API...")
      } catch (error) {
        console.log("üí• Perplexity error:", error.message)
      }
    }

    // üß† TRY GOOGLE GEMINI (High Quality AI)
    if (process.env.GEMINI_API_KEY) {
      try {
        console.log("üß† Trying Google Gemini...")

        // Convert messages to Gemini format
        const geminiMessages = messages.map((msg) => ({
          role: msg.role === "assistant" ? "model" : "user",
          parts: [{ text: msg.content }],
        }))

        // Add system prompt as first user message
        const geminiPayload = {
          contents: [
            {
              role: "user",
              parts: [{ text: systemPrompt }],
            },
            ...geminiMessages,
          ],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 4000,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE",
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE",
            },
          ],
        }

        const response = await fetch(
          `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${process.env.GEMINI_API_KEY}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(geminiPayload),
          },
        )

        if (response.ok) {
          const data = await response.json()
          const content = data.candidates?.[0]?.content?.parts?.[0]?.text

          if (content) {
            console.log("‚úÖ Google Gemini SUCCESS!")
            return NextResponse.json({
              content: content,
              provider: "Google Gemini üß† (High Quality AI)",
              status: "success",
            })
          }
        }
        console.log("‚ùå Gemini failed, trying next API...")
      } catch (error) {
        console.log("üí• Gemini error:", error.message)
      }
    }

    // üöÄ TRY GROQ (Fast and often free)
    if (process.env.GROQ_API_KEY) {
      try {
        console.log("‚ö° Trying Groq...")

        const response = await fetch("https://api.groq.com/openai/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${process.env.GROQ_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "llama3-8b-8192",
            messages: [{ role: "system", content: systemPrompt }, ...messages],
            max_tokens: 4000,
            temperature: 0.7,
          }),
        })

        if (response.ok) {
          const data = await response.json()
          const content = data.choices?.[0]?.message?.content

          if (content) {
            console.log("‚úÖ Groq SUCCESS!")
            return NextResponse.json({
              content: content,
              provider: "Groq Llama ‚ö° (Fast AI)",
              status: "success",
            })
          }
        }
        console.log("‚ùå Groq failed, trying next API...")
      } catch (error) {
        console.log("üí• Groq error:", error.message)
      }
    }

    // ü§ñ TRY OPENAI (High quality)
    if (process.env.OPENAI_API_KEY) {
      try {
        console.log("ü§ñ Trying OpenAI...")

        const response = await fetch("https://api.openai.com/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "gpt-3.5-turbo",
            messages: [{ role: "system", content: systemPrompt }, ...messages],
            max_tokens: 4000,
            temperature: 0.7,
          }),
        })

        if (response.ok) {
          const data = await response.json()
          const content = data.choices?.[0]?.message?.content

          if (content) {
            console.log("‚úÖ OpenAI SUCCESS!")
            return NextResponse.json({
              content: content,
              provider: "OpenAI GPT-3.5 ü§ñ (High Quality)",
              status: "success",
            })
          }
        }
        console.log("‚ùå OpenAI failed, trying next API...")
      } catch (error) {
        console.log("üí• OpenAI error:", error.message)
      }
    }

    // üéØ TRY XAI GROK (Latest AI)
    if (process.env.XAI_API_KEY) {
      try {
        console.log("üéØ Trying xAI Grok...")

        const response = await fetch("https://api.x.ai/v1/chat/completions", {
          method: "POST",
          headers: {
            Authorization: `Bearer ${process.env.XAI_API_KEY}`,
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            model: "grok-beta",
            messages: [{ role: "system", content: systemPrompt }, ...messages],
            max_tokens: 4000,
            temperature: 0.7,
          }),
        })

        if (response.ok) {
          const data = await response.json()
          const content = data.choices?.[0]?.message?.content

          if (content) {
            console.log("‚úÖ xAI Grok SUCCESS!")
            return NextResponse.json({
              content: content,
              provider: "xAI Grok üéØ (Latest AI)",
              status: "success",
            })
          }
        }
        console.log("‚ùå xAI failed, using smart fallback...")
      } catch (error) {
        console.log("üí• xAI error:", error.message)
      }
    }

    // üß† SMART FALLBACK RESPONSES (When no APIs work)
    console.log("üß† Using Smart Fallback System...")

    const smartResponse = generateIntelligentResponse(userMessage)

    return NextResponse.json({
      content: smartResponse,
      provider: "XyloGen üß† (Smart Assistant)",
      status: "fallback",
      note: "Add API keys for enhanced AI capabilities",
    })
  } catch (error) {
    console.error("üí• System Error:", error)

    return NextResponse.json(
      {
        content: `ü¶à **XyloGen - Smart Assistant** ü¶à\n\nI'm here to help! While I'm working in smart mode, I can still assist you with many topics.\n\n**Your question:** "${error.message}"\n\n**I can help with:**\n‚Ä¢ General knowledge and explanations\n‚Ä¢ Programming and technology\n‚Ä¢ Indian culture and information\n‚Ä¢ Problem-solving and advice\n‚Ä¢ Educational topics\n\nüöÄ **Ask me anything and I'll do my best to help!** üáÆüá≥`,
        provider: "XyloGen üß† (Smart Mode)",
        status: "error_fallback",
      },
      { status: 200 },
    )
  }
}

// üß† Intelligent Response Generator - Provides detailed answers like ChatGPT
function generateIntelligentResponse(userMessage: string): string {
  const message = userMessage.toLowerCase()

  // Real-time date/time questions
  if (
    message.includes("time") ||
    message.includes("date") ||
    message.includes("clock") ||
    message.includes("what time") ||
    message.includes("current time") ||
    message.includes("today")
  ) {
    console.log("‚úÖ Matched time/date pattern in fallback")
    const now = new Date()
    const timeString = now.toLocaleTimeString("en-IN", {
      timeZone: "Asia/Kolkata",
      hour12: true,
      hour: "2-digit",
      minute: "2-digit",
      second: "2-digit",
    })
    const dateString = now.toLocaleDateString("en-IN", {
      timeZone: "Asia/Kolkata",
      weekday: "long",
      year: "numeric",
      month: "long",
      day: "numeric",
    })

    return `üïê **Real-Time Information** üïê

**üìÖ Current Date & Time:**
‚Ä¢ **Date:** ${dateString}
‚Ä¢ **Time:** ${timeString}
‚Ä¢ **Time Zone:** Asia/Kolkata (IST)

**üåç Additional Details:**
‚Ä¢ **UTC Offset:** +05:30
‚Ä¢ **Day of Week:** ${now.toLocaleDateString("en-US", { weekday: "long" })}
‚Ä¢ **Month:** ${now.toLocaleDateString("en-US", { month: "long" })}
‚Ä¢ **Year:** ${now.getFullYear()}

**üáÆüá≥ Indian Standard Time (IST):**
‚Ä¢ No daylight saving time changes
‚Ä¢ Same time across entire India
‚Ä¢ Based on 82.5¬∞E longitude (Mirzapur)

**‚è∞ Fun Facts:**
‚Ä¢ IST is 5 hours 30 minutes ahead of UTC
‚Ä¢ India uses a single time zone despite its size
‚Ä¢ IST was adopted in 1947 after independence

**Need time in other zones or scheduling help?** Just ask! üåê`
  }

  // Greeting responses
  if (
    message.includes("hello") ||
    message.includes("hi") ||
    message.includes("hey") ||
    message.includes("namaste") ||
    message.includes("good morning") ||
    message.includes("good evening") ||
    message.includes("good afternoon")
  ) {
    console.log("‚úÖ Matched greeting pattern")
    return `üôè **Namaste! Welcome to XyloGen!** üôè\n\nü¶à **I'm your intelligent AI assistant from India!** üáÆüá≥\n\n**I can help you with:**\n‚Ä¢ üìö **Educational topics** - Science, math, history, literature\n‚Ä¢ üíª **Technology & Programming** - Coding, AI, software development\n‚Ä¢ üáÆüá≥ **Indian culture & knowledge** - Traditions, languages, history\n‚Ä¢ üß† **Problem solving** - Analysis, advice, explanations\n‚Ä¢ üéØ **General knowledge** - Wide range of topics and questions\n‚Ä¢ üì∏ **Image analysis** - Upload photos for detailed analysis\n‚Ä¢ üïê **Real-time info** - Current time, date, and live information\n\n**Try asking me:**\n‚Ä¢ "What time is it now?"\n‚Ä¢ "What is embedded system?"\n‚Ä¢ "Explain machine learning"\n‚Ä¢ "Tell me about Python programming"\n‚Ä¢ "What are Indian festivals?"\n‚Ä¢ "How does React work?"\n\nüöÄ **What would you like to know today?**`
  }

  // Default intelligent response for any other question
  console.log("üîÑ Using default intelligent response for:", message)
  return `ü¶à **XyloGen - Intelligent Assistant** ü¶à\n\n**Your Question:** "${userMessage}"\n\nüß† **I'm here to provide comprehensive answers!**\n\nI understand you're asking about "${userMessage}". While I'm working in smart mode without real-time APIs, I can still provide detailed, intelligent insights based on my knowledge.\n\n**üîç What I can help you understand:**\n\n**Technology & Programming:**\n‚Ä¢ Programming languages (Python, JavaScript, Java, C++)\n‚Ä¢ Web development frameworks (React, Vue, Angular, Django)\n‚Ä¢ Software engineering concepts and best practices\n‚Ä¢ Career guidance and industry trends\n‚Ä¢ Code examples and implementation strategies\n\n**Science & Education:**\n‚Ä¢ Complex concepts broken down into understandable parts\n‚Ä¢ Real-world applications and examples\n‚Ä¢ Mathematical and scientific principles\n‚Ä¢ Learning resources and study strategies\n\n**Indian Context & Culture:**\n‚Ä¢ Cultural traditions, festivals, and customs\n‚Ä¢ Indian technology industry and opportunities\n‚Ä¢ Educational institutions and career paths\n‚Ä¢ Regional diversity and local insights\n‚Ä¢ Government initiatives and industry trends\n\n**Real-Time Information:**\n‚Ä¢ Current time and date (just ask "What time is it?")\n‚Ä¢ Live clock with Indian Standard Time\n‚Ä¢ Date information and calendar details\n\n**üöÄ To get the most detailed answer:**\n\n1. **Be specific:** Ask about particular aspects you want to understand\n2. **Provide context:** Let me know your background or use case\n3. **Ask follow-ups:** I can dive deeper into any area of interest\n4. **Request examples:** I can provide practical illustrations and code samples\n\n**üí° Try rephrasing your question like:**\n‚Ä¢ "Explain [topic] in simple terms with examples"\n‚Ä¢ "What are the key concepts in [subject]?"\n‚Ä¢ "How does [technology/process] work step by step?"\n‚Ä¢ "What are the practical applications of [concept]?"\n‚Ä¢ "What should I know about [topic] for career in India?"\n\n**üáÆüá≥ Enhanced with Indian Perspective:**\nI always provide relevant Indian context, including:\n‚Ä¢ Local career opportunities and salary ranges\n‚Ä¢ Indian companies and market conditions\n‚Ä¢ Educational resources available in India\n‚Ä¢ Cultural significance and regional variations\n‚Ä¢ Government initiatives and industry trends\n\n**üîß For Enhanced Capabilities:**\nAdd API keys for real-time information:\n‚Ä¢ **Perplexity AI:** Current events and real-time search\n‚Ä¢ **Google Gemini:** Advanced AI understanding (ACTIVE!)\n‚Ä¢ **Groq:** Fast AI responses\n‚Ä¢ **SERP API:** Image analysis and web search\n\n**I'm ready to provide detailed, intelligent explanations on any topic!** Whether you're interested in learning programming, understanding complex technologies, exploring career options, or diving into Indian culture and opportunities.\n\n**What specific aspect would you like me to elaborate on?** üöÄüáÆüá≥`
}
